# 🐳 DevOps with Docker – Learning Journey (Class 26–30)

This README documents my learning experience with **Docker**, covering containerization, images, volumes, Docker Compose, Docker Hub, and Docker Swarm. A complete DevOps container ecosystem — from basics to orchestration!

---

## 📦 What is Docker?

- Docker is a **free and open-source platform** used to build, run, and manage containerized applications.
- It enables **OS-level virtualization** (aka containerization).
- Written in **Go**.
- Containers are **lightweight**, fast, and use **host resources** (CPU, RAM, OS).
- Platform independent — runs natively on Linux.

---

## 🧱 Monolithic vs Microservices

| Aspect        | Monolithic                        | Microservices                      |
|---------------|------------------------------------|------------------------------------|
| Maintenance   | Hard to update/deploy              | Easier to manage & scale           |
| Performance   | Degrades with size                 | Isolated container-based services  |
| Cost          | Higher resource usage              | Cost-efficient via scaling         |

---

## 📚 Key Docker Concepts

| Term              | Description                                                                 |
|-------------------|-----------------------------------------------------------------------------|
| **Image**         | Blueprint for a container (includes OS + app + dependencies)                |
| **Container**     | Running instance of an image                                                |
| **Dockerfile**    | Script to build custom Docker images                                        |
| **Docker Daemon** | Background process managing containers & images                             |
| **Docker Registry**| Stores Docker images (e.g. Docker Hub)                                     |
| **Docker Host**   | Machine (server or local) running Docker                                    |

---

## 🐳 Docker Basic Commands

```bash
docker --version               # Check Docker version
docker ps                      # List running containers
docker images                  # List all images
docker run hello-world         # Run first container
docker stop <container>        # Gracefully stop container
docker kill <container>        # Force stop container
docker build -t image:tag .    # Build image from Dockerfile
docker exec -it <container> bash  # Run command inside container
```

---

## 🔧 Dockerfile Example

```Dockerfile
# Use base image
FROM ubuntu:latest

# Install dependencies
RUN apt-get update && apt-get install -y nginx

# Copy local files to container
COPY index.html /var/www/html/

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
```

Build and run:
```bash
docker build -t mysite:v1 .
docker run -d -p 8080:80 mysite:v1
```

---

## 💾 Docker Volumes

Volumes are used for **persistent storage** outside of containers.

### 🔹 Methods:

1. **Bind Mount** – attach local path to container
2. **Named Volume** – managed by Docker (`docker volume create`)
3. **Anonymous Volume** – auto-generated path

### 📦 Volume Commands

```bash
docker volume create myvolume
docker run -d -v myvolume:/data ubuntu
docker volume inspect myvolume
```

### 🛠 Copy Local Files to Volume

```bash
cp * /var/lib/docker/volumes/myvolume/_data
```

### 📌 Tip:
- Volumes are **loosely coupled** – if a container is deleted, volume stays.

---

## ⚙️ Docker System Commands

```bash
docker system df     # Show resource usage
docker system prune  # Clean unused data
```

---

## 🧪 Jenkins in Docker

```bash
docker run -it --name jenkins -p 8080:8080 jenkins/jenkins:lts
```

- This spins up a full Jenkins server in a container.
- Access it via: `http://localhost:8080`

---

## 🌍 Deploy Static Website with Docker

1. Create `index.html`
2. Use Dockerfile to copy it
3. Change port and content to deploy multiple apps

But this method is **manual**. For automation, use **Docker Compose**.

---

## 🧩 Docker Compose

Compose helps manage **multi-container apps** using a YAML file.

### 🔹 Example `docker-compose.yml`

```yaml
version: '3'
services:
  web:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - ./html:/usr/share/nginx/html
```

### 🔹 Commands

```bash
docker-compose up -d
docker-compose down
docker-compose logs
docker-compose kill
docker-compose top
```

> ⚠️ Compose runs on **single host** — if deleted, all containers are lost.

---

## 📤 Docker Hub

- Central platform to **store & share images**
- Public and Private repositories available

### 🔹 Workflow:

```bash
docker login
docker tag myapp yourusername/myapp:latest
docker push yourusername/myapp:latest
```

Then use it on any server:

```bash
docker pull yourusername/myapp:latest
```

---

## ⚓ Docker Swarm – Cluster Mode

> Swarm is Docker’s **native container orchestration tool**.

- Manages multiple nodes (servers)
- Ensures **high availability** and scalability
- Containers run on **manager and worker nodes**

### 🔹 Setup:

1. Init Swarm on manager:
```bash
docker swarm init
```

2. Join worker nodes:
```bash
docker swarm join --token <token> <manager-ip>:2377
```

3. Deploy services:
```bash
docker service create --name movies --replicas=3 --publish 81:80 yourdockerhub/movies:latest

docker service create --name trains --replicas=3 --publish 82:80 yourdockerhub/trains:latest
```

Each node will run a replica. Access via:
```bash
http://<node-ip>:81
```

---

## 🧠 Summary of Classes

| Class | Topic                            |
|-------|----------------------------------|
| 26    | Intro to Docker & Images         |
| 27    | Dockerfile, Volumes              |
| 28    | Copying files, Volume Mounting   |
| 29    | Docker Compose, Static Site      |
| 30    | Docker Hub & Docker Swarm        |

---

## 🙌 Final Thoughts

Docker simplifies building, shipping, and running applications. Whether it's running Jenkins, deploying websites, or managing containers across multiple nodes using Swarm, Docker is a core part of modern DevOps.

💡 Stay tuned — Kubernetes is next!

📌 Feel free to fork the repo and ⭐ it if you found this helpful!
